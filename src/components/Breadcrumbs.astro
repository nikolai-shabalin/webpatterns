---
export interface Props {
	items: Array<{
		name: string;
		url: string;
		icon?: string;
	}>;
	separator?: string;
	showHomeIcon?: boolean;
	variant?: 'default' | 'minimal' | 'with-icons';
}

const { 
	items, 
	separator = '/', 
	showHomeIcon = true,
	variant = 'default'
} = Astro.props;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
const isHomePage = (url: string) => url === '/' || url === '/home';

// –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
const getIcon = (item: { name: string; url: string; icon?: string }) => {
	if (item.icon) return item.icon;
	if (isHomePage(item.url) && showHomeIcon) return 'üè†';
	return '';
};
---

<nav class={`breadcrumbs breadcrumbs-${variant}`} aria-label="–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏">
	<ol class="breadcrumbs-list">
		{items.map((item, index) => {
			const isLast = index === items.length - 1;
			const icon = getIcon(item);
			
			return (
				<li class="breadcrumbs-item">
					{isLast ? (
						<span 
							class="breadcrumbs-link breadcrumbs-current" 
							aria-current="page"
						>
							{icon && <span class="breadcrumbs-icon">{icon}</span>}
							<span class="breadcrumbs-text">{item.name}</span>
						</span>
					) : (
						<a href={item.url} class="breadcrumbs-link">
							{icon && <span class="breadcrumbs-icon">{icon}</span>}
							<span class="breadcrumbs-text">{item.name}</span>
						</a>
					)}
					
					{!isLast && (
						<span class="breadcrumbs-separator" aria-hidden="true">
							{separator}
						</span>
					)}
				</li>
			);
		})}
	</ol>
</nav>

<style>
	.breadcrumbs {
		display: flex;
		align-items: center;
		font-family: inherit;
	}

	.breadcrumbs-list {
		display: flex;
		align-items: center;
		list-style: none;
		margin: 0;
		padding: 0;
		flex-wrap: wrap;
		gap: 4px;
	}

	.breadcrumbs-item {
		display: flex;
		align-items: center;
		margin: 0;
	}

	.breadcrumbs-link {
		display: inline-flex;
		align-items: center;
		gap: 6px;
		padding: 8px 12px;
		color: #667eea;
		text-decoration: none;
		border-radius: 8px;
		font-weight: 500;
		font-size: 0.95rem;
		transition: all 0.2s ease;
		position: relative;
		overflow: hidden;
	}

	.breadcrumbs-link:hover {
		background: rgba(102, 126, 234, 0.1);
		color: #764ba2;
		transform: translateY(-1px);
	}

	.breadcrumbs-link::before {
		content: '';
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.1), transparent);
		transition: left 0.3s ease;
	}

	.breadcrumbs-link:hover::before {
		left: 100%;
	}

	.breadcrumbs-current {
		color: #1a1a1a;
		font-weight: 600;
		cursor: default;
		background: rgba(102, 126, 234, 0.05);
		border: 1px solid rgba(102, 126, 234, 0.1);
	}

	.breadcrumbs-current:hover {
		background: rgba(102, 126, 234, 0.05);
		color: #1a1a1a;
		transform: none;
	}

	.breadcrumbs-current::before {
		display: none;
	}

	.breadcrumbs-icon {
		font-size: 1rem;
		line-height: 1;
	}

	.breadcrumbs-text {
		line-height: 1.2;
	}

	.breadcrumbs-separator {
		color: #cbd5e0;
		font-weight: 400;
		margin: 0 4px;
		font-size: 0.9rem;
		user-select: none;
	}

	/* –í–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ */
	.breadcrumbs-minimal .breadcrumbs-link {
		padding: 4px 8px;
		font-size: 0.9rem;
		border-radius: 4px;
	}

	.breadcrumbs-minimal .breadcrumbs-separator {
		margin: 0 2px;
		font-size: 0.8rem;
	}

	.breadcrumbs-with-icons .breadcrumbs-link {
		padding: 10px 14px;
		font-size: 1rem;
		border-radius: 10px;
		background: rgba(102, 126, 234, 0.05);
		border: 1px solid rgba(102, 126, 234, 0.1);
	}

	.breadcrumbs-with-icons .breadcrumbs-link:hover {
		background: rgba(102, 126, 234, 0.1);
		border-color: rgba(102, 126, 234, 0.2);
	}

	.breadcrumbs-with-icons .breadcrumbs-current {
		background: rgba(102, 126, 234, 0.15);
		border-color: rgba(102, 126, 234, 0.3);
	}

	/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
	@media (max-width: 768px) {
		.breadcrumbs-list {
			gap: 2px;
		}

		.breadcrumbs-link {
			padding: 6px 8px;
			font-size: 0.9rem;
		}

		.breadcrumbs-icon {
			font-size: 0.9rem;
		}

		.breadcrumbs-separator {
			margin: 0 2px;
			font-size: 0.8rem;
		}

		/* –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–∫—Ä—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è */
		.breadcrumbs-text {
			max-width: 80px;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;
		}
	}

	@media (max-width: 480px) {
		.breadcrumbs-link {
			padding: 4px 6px;
			font-size: 0.85rem;
		}

		.breadcrumbs-text {
			max-width: 60px;
		}

		.breadcrumbs-icon {
			font-size: 0.85rem;
		}
	}

	/* –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX */
	.breadcrumbs-link {
		position: relative;
	}

	.breadcrumbs-link:active {
		transform: scale(0.98);
	}

	/* –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å */
	.breadcrumbs-link:focus {
		outline: 2px solid #667eea;
		outline-offset: 2px;
	}

	/* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è) */
	@media (prefers-color-scheme: dark) {
		.breadcrumbs-current {
			color: #ffffff;
			background: rgba(102, 126, 234, 0.2);
		}

		.breadcrumbs-separator {
			color: #718096;
		}
	}
</style>

<script>
	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	document.addEventListener('DOMContentLoaded', () => {
		const breadcrumbLinks = document.querySelectorAll('.breadcrumbs-link:not(.breadcrumbs-current)');
		
		breadcrumbLinks.forEach(link => {
			link.addEventListener('click', (e) => {
				e.preventDefault();
				
				// –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–∂–∞—Ç–∏—è
				link.style.transform = 'scale(0.95)';
				setTimeout(() => {
					link.style.transform = '';
				}, 150);
				
				// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
				console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞:', link.getAttribute('href'));
			});
		});
	});
</script>
